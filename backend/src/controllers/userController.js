// src/controllers/userController.js
const asyncHandler = require('express-async-handler');
const User = require('../models/User');
const jwt = require('jsonwebtoken');
const Counter = require('../models/Counter'); // Import Counter model

// Generate JWT (utility function)
const generateToken = (id) => {
    return jwt.sign({ id }, process.env.JWT_SECRET, {
        expiresIn: process.env.JWT_EXPIRES_IN,
    });
};

// @desc    Register new user
// @route   POST /api/users/register
// @access  Public
const registerUser = asyncHandler(async (req, res) => {
    const { 
        username, 
        email, 
        password, 
        name,
        phone,
        gender,
        dob,
        department,
        team,
        employeeType,
        location,
        address,
        about,
        profileImg
    } = req.body;

    if (!email || !password) {
        res.status(400);
        throw new Error('Please enter email and password.');
    }

    const userExists = await User.findOne({ email });
    if (userExists) {
        res.status(400);
        throw new Error('User with that email already exists');
    }
    
    if (username) {
        const usernameExists = await User.findOne({ username });
        if (usernameExists) {
            res.status(400);
            throw new Error('User with that username already exists');
        }
    }

    // Create user - numericalId will be auto-generated by pre-save hook
    const user = await User.create({
        username: username || email.split('@')[0],
        email,
        password,
        name: name || email.split('@')[0],
        role: 'user',
        phone,
        gender,
        dob,
        department,
        team,
        status: 'active',
        employeeType,
        location,
        address,
        about,
        profileImg
    });

    if (user) {
        res.status(201).json({
            _id: user._id,
            numericalId: user.numericalId,
            username: user.username,
            email: user.email,
            name: user.name,
            role: user.role,
            status: user.status,
            phone: user.phone,
            gender: user.gender,
            dob: user.dob,
            department: user.department,
            team: user.team,
            employeeType: user.employeeType,
            location: user.location,
            address: user.address,
            about: user.about,
            profileImg: user.profileImg
        });
    } else {
        res.status(400);
        throw new Error('Invalid user data');
    }
});

// @desc    Authenticate user & get token
// @route   POST /api/users/login
// @access  Public
const loginUser = asyncHandler(async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        res.status(400);
        throw new Error('Please provide email and password');
    }

    const user = await User.findOne({ email });
    
    if (user && (await user.matchPassword(password))) {
        res.json({
            _id: user._id,
            numericalId: user.numericalId, // Include numerical ID
            username: user.username,
            email: user.email,
            role: user.role,
            name: user.name, // Include name
            status: user.status, // Include status
            profileImg: user.profileImg, // Include profileImg
            token: generateToken(user._id),
            // Add any other fields you want to pass to the frontend currentUser object upon login
        });
    } else {
        res.status(401);
        throw new Error('Invalid credentials');
    }
});

// @desc    Get current user profile
// @route   GET /api/users/profile
// @access  Private
const getUserProfile = asyncHandler(async (req, res) => {
    // req.user is populated by `protect` middleware
    const user = await User.findById(req.user._id).select('-password');

    if (user) {
        res.json({
            _id: user._id,
            numericalId: user.numericalId, // Include numerical ID
            username: user.username,
            email: user.email,
            role: user.role,
            name: user.name,
            phone: user.phone,
            gender: user.gender,
            dob: user.dob,
            department: user.department,
            team: user.team ? user.team.toString() : null, // Ensure team is ID string or null
            status: user.status,
            employeeType: user.employeeType,
            location: user.location,
            joinDate: user.joinDate,
            lastActive: user.lastActive,
            address: user.address,
            about: user.about,
            profileImg: user.profileImg,
            notifications: user.notifications,
            performance: user.performance,
            completionRate: user.completionRate,
            // Only include fields you want in the profile. Password is already excluded.
        });
    } else {
        res.status(404);
        throw new Error('User not found');
    }
});

module.exports = { registerUser, loginUser, getUserProfile };